import os
import requests
import asyncio
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from urllib.parse import urlparse

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_KEY = os.getenv("ELEVEN_API_KEY")
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 6728899517

VOICE_ID_DENIS = '0BcDz9UPwL3MpsnTeUlO'  # –î–µ–Ω–∏—Å
VOICE_ID_OGE = 'MWyJiWDobXN8FX3CJTdE'    # –û–ª–µ–≥
VOICE_ID_ANYA = 'rxEz5E7hIAPk7D3bXwf6'   # –ê–Ω—è
VOICE_ID_VIKA = '8M81RK3MD7u4DOJpu2G5'   # –í–∏–∫–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ---
DATABASE_URL = os.getenv("DATABASE_URL")
url = urlparse(DATABASE_URL)
conn = psycopg2.connect(
    database=url.path[1:],
    user=url.username,
    password=url.password,
    host=url.hostname,
    port=url.port
)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        free_messages_used INTEGER DEFAULT 0
    )
''')
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"),
    KeyboardButton("üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å"),
    KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
    KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
)

voice_kb = ReplyKeyboardMarkup(resize_keyboard=True)
voice_kb.add(
    KeyboardButton("–î–µ–Ω–∏—Å"),
    KeyboardButton("–û–ª–µ–≥"),
    KeyboardButton("–ê–Ω—è"),
    KeyboardButton("–í–∏–∫–∞"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

back_kb = ReplyKeyboardMarkup(resize_keyboard=True)
back_kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

instruction_kb = ReplyKeyboardMarkup(resize_keyboard=True)
instruction_kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

profile_kb = ReplyKeyboardMarkup(resize_keyboard=True)
profile_kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
profile_kb.add(KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö"))

purchase_kb = ReplyKeyboardMarkup(resize_keyboard=True)
purchase_kb.add(
    KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
selected_voice = {}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–º–æ—Ü–∏–π ---
def get_emotion_settings(text):
    happy = ['üòÇ', 'ü§£', 'üòÑ']
    sad = ['üò¢', 'üò≠', 'üíî']
    angry = ['üò°', 'ü§¨']
    warm = ['üòä', '‚ù§Ô∏è', 'ü•∞']

    happy_count = sum(text.count(e) for e in happy)
    sad_count = sum(text.count(e) for e in sad)
    angry_count = sum(text.count(e) for e in angry)
    warm_count = sum(text.count(e) for e in warm)

    if max(happy_count, sad_count, angry_count, warm_count) == 0:
        return 0.5, 0.75

    mood = max([ 
        (happy_count, (0.3, 0.9)),
        (sad_count, (0.7, 0.5)),
        (angry_count, (0.8, 0.6)),
        (warm_count, (0.4, 0.8))
    ], key=lambda x: x[0])[1]

    return mood

instruction_text = (
    "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
    "1. üó£ *–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:*\n"
    "   ‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç\".\n"
    "   ‚Ä¢ –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å (–û–ª–µ–≥, –î–µ–Ω–∏—Å, –ê–Ω—è, –í–∏–∫–∞).\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
    "   ‚Ä¢ –î–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª—ã –¥–ª—è —ç–º–æ—Ü–∏–π:\n"
    "     üòÇü§£üòÑ ‚Äî –≤–µ—Å—ë–ª—ã–π, üò¢üò≠üíî ‚Äî –≥—Ä—É—Å—Ç–Ω—ã–π, üò°ü§¨ ‚Äî –∑–ª–æ–π, üòä‚ù§Ô∏èü•∞ ‚Äî —Ç—ë–ø–ª—ã–π.\n\n"
    "2. üéß *–ó–∞–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:*\n"
    "   ‚Ä¢ –ù–∞–∂–º–∏ \"üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å\".\n"
    "   ‚Ä¢ –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å.\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ (–¥–æ 15 —Å–µ–∫—É–Ω–¥).\n\n"
    "‚ùóÔ∏è–ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏—à—å –ª–∏–º–∏—Ç, –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ–± —ç—Ç–æ–º.\n"
)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ ---
def is_text_too_long(text):
    return len(text) > 200  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
def is_voice_too_long(voice_duration):
    return voice_duration > 15  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT INTO users (id) VALUES (%s) ON CONFLICT DO NOTHING', (user_id,))
    conn.commit()

    welcome = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç üé§üéß\n\n"
        "–Ø —É–º–µ—é –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –∏ –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π! üòä"
    )
    await message.answer(welcome, reply_markup=main_kb)

@dp.message_handler(commands=['broadcast'])
async def broadcast_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute("SELECT id FROM users")
    users = cursor.fetchall()
    sent = 0
    for user in users:
        try:
            await bot.send_message(user[0], text)
            sent += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user[0]}: {e}")
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(commands=['users'])
async def users_count(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {count}")

@dp.message_handler(lambda msg: msg.text == "üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def tts_request(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT free_messages_used FROM users WHERE id = %s", (user_id,))
    used = cursor.fetchone()
    used = used[0] if used else 0

    if used >= 5:
        await message.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç:", reply_markup=voice_kb)

@dp.message_handler(lambda msg: msg.text == "üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å")
async def vc_request(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT free_messages_used FROM users WHERE id = %s", (user_id,))
    used = cursor.fetchone()
    used = used[0] if used else 0

    if used >= 5:
        await message.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ:", reply_markup=voice_kb)

@dp.message_handler(lambda msg: msg.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    await message.answer(instruction_text, reply_markup=instruction_kb)

@dp.message_handler(lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT free_messages_used FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()

    if result is not None:
        used = result[0]
    else:
        used = 0

    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ID: {user_id}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/5",
        reply_markup=profile_kb
    )

@dp.message_handler(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text in ["–î–µ–Ω–∏—Å", "–û–ª–µ–≥", "–ê–Ω—è", "–í–∏–∫–∞"])
async def handle_voice_choice(message: types.Message):
    selected_voice[message.from_user.id] = message.text
    await message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {message.text}. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç:", reply_markup=back_kb)

@dp.message_handler(lambda msg: msg.text not in ["üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", "üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–î–µ–Ω–∏—Å", "–û–ª–µ–≥", "–ê–Ω—è", "–í–∏–∫–∞", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
async def handle_text(message: types.Message):
    if is_text_too_long(message.text):
        await message.answer("–í–∞—à —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –µ–≥–æ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_id = message.from_user.id
    cursor.execute("SELECT free_messages_used FROM users WHERE id = %s", (user_id,))
    used = cursor.fetchone()
    used = used[0] if used else 0

    if used >= 5:
        await message.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    voice = selected_voice.get(message.from_user.id)
    if not voice:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å.")
        return

    text = message.text
    stability, similarity = get_emotion_settings(text)

    status = await message.answer("‚åõ –û–∑–≤—É—á–∏–≤–∞—é...")

    headers = {
        'xi-api-key': API_KEY,
        'Content-Type': 'application/json'
    }

    data = {
        'text': text,
        'model_id': 'eleven_multilingual_v2',
        'voice_settings': {
            'stability': stability,
            'similarity_boost': similarity
        }
    }

    voice_map = {
        "–î–µ–Ω–∏—Å": VOICE_ID_DENIS,
        "–û–ª–µ–≥": VOICE_ID_OGE,
        "–ê–Ω—è": VOICE_ID_ANYA,
        "–í–∏–∫–∞": VOICE_ID_VIKA
    }

    response = requests.post(
        f"https://api.elevenlabs.io/v1/text-to-speech/{voice_map[voice]}",
        headers=headers,
        json=data
    )

    if response.status_code == 200:
        with open('output.mp3', 'wb') as f:
            f.write(response.content)
        await bot.send_audio(message.chat.id, open('output.mp3', 'rb'))

        cursor.execute("UPDATE users SET free_messages_used = free_messages_used + 1 WHERE id = %s", (user_id,))
        conn.commit()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
    await status.delete()

@dp.message_handler(lambda msg: msg.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö")
async def purchase(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT free_messages_used FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()

    if result is not None:
        used = result[0]
    else:
        used = 0

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–∞—Ö
    packages = [
        ("5 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "$0.39"),
        ("20 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "$1.3"),
        ("50 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "$2.9")
    ]

    package_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
    for idx, (count, price) in enumerate(packages, 1):
        package_text += f"{idx}. {count} ‚Äî {price}\n"

    await message.answer(package_text, reply_markup=purchase_kb)

@dp.message_handler(lambda msg: msg.text in ["1", "2", "3"])
async def handle_purchase(message: types.Message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, CryptoBot)
    if msg.text == "1":
        # –î–æ–ø—É—Å—Ç–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–∞–∫–µ—Ç –∑–∞ $0.39
        additional_messages = 5
        price = "$0.39"
    elif msg.text == "2":
        # –ü–∞–∫–µ—Ç –∑–∞ $1.3
        additional_messages = 20
        price = "$1.3"
    elif msg.text == "3":
        # –ü–∞–∫–µ—Ç –∑–∞ $2.9
        additional_messages = 50
        price = "$2.9"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute("UPDATE users SET free_messages_used = free_messages_used + %s WHERE id = %s", (additional_messages, user_id))
    conn.commit()

    await message.answer(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–∞–∫–µ—Ç {additional_messages} –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {price}. –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

