import os
import psycopg2
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from urllib.parse import urlparse

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_KEY = os.getenv("ELEVEN_API_KEY")
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 6728899517

VOICE_ID_DENIS = '0BcDz9UPwL3MpsnTeUlO'  # –î–µ–Ω–∏—Å
VOICE_ID_OGE = 'MWyJiWDobXN8FX3CJTdE'    # –û–ª–µ–≥
VOICE_ID_ANYA = 'rxEz5E7hIAPk7D3bXwf6'   # –ê–Ω—è
VOICE_ID_VIKA = '8M81RK3MD7u4DOJpu2G5'   # –í–∏–∫–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ---
DATABASE_URL = os.getenv("DATABASE_URL")
url = urlparse(DATABASE_URL)
conn = psycopg2.connect(
    database=url.path[1:],
    user=url.username,
    password=url.password,
    host=url.hostname,
    port=url.port
)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        voice_count INTEGER DEFAULT 0
    )
''')
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"),
    KeyboardButton("üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å"),
    KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
    KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
)

voice_kb = ReplyKeyboardMarkup(resize_keyboard=True)
voice_kb.add(
    KeyboardButton("–î–µ–Ω–∏—Å"),
    KeyboardButton("–û–ª–µ–≥"),
    KeyboardButton("–ê–Ω—è"),
    KeyboardButton("–í–∏–∫–∞"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
selected_voice = {}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç ---
def has_reached_limit(user_id):
    cursor.execute("SELECT voice_count FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()
    return result[0] >= 5  # –õ–∏–º–∏—Ç –Ω–∞ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT INTO users (id) VALUES (%s) ON CONFLICT DO NOTHING', (user_id,))
    conn.commit()

    welcome = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç üé§üéß\n\n"
        "–Ø —É–º–µ—é –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –∏ –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π! üòä"
    )
    await message.answer(welcome, reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def tts_request(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç:", reply_markup=voice_kb)

@dp.message_handler(lambda msg: msg.text == "üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å")
async def vc_request(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ:", reply_markup=voice_kb)

@dp.message_handler(lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = message.from_user.id
    try:
        cursor.execute("SELECT voice_count FROM users WHERE id = %s", (user_id,))
        result = cursor.fetchone()
        count = result[0] if result else 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    text = f"üë§ –í–∞—à ID: {user_id}\nüéô –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {count}"
    await message.answer(text, reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text in ["–î–µ–Ω–∏—Å", "–û–ª–µ–≥", "–ê–Ω—è", "–í–∏–∫–∞"])
async def handle_voice_choice(message: types.Message):
    selected_voice[message.from_user.id] = message.text
    await message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {message.text}. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç:", reply_markup=back_kb)

@dp.message_handler(lambda msg: msg.text not in ["üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", "üéß –ó–∞–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–î–µ–Ω–∏—Å", "–û–ª–µ–≥", "–ê–Ω—è", "–í–∏–∫–∞", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
async def handle_text(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if has_reached_limit(user_id):
        await message.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.")
        return

    voice = selected_voice.get(message.from_user.id)
    if not voice:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å.")
        return

    text = message.text
    voice_map = {
        '–î–µ–Ω–∏—Å': VOICE_ID_DENIS,
        '–û–ª–µ–≥': VOICE_ID_OGE,
        '–ê–Ω—è': VOICE_ID_ANYA,
        '–í–∏–∫–∞': VOICE_ID_VIKA,
    }

    # –ó–∞–ø—Ä–æ—Å –∫ API ElevenLabs
    headers = {
        'xi-api-key': API_KEY,
        'Content-Type': 'application/json',
    }

    data = {
        "text": text,
    }

    response = requests.post(
        f'https://api.elevenlabs.io/v1/text-to-speech/{voice_map[voice]}',
        headers=headers,
        json=data
    )

    if response.status_code == 200:
        audio_url = response.json().get('audio_url')
        await bot.send_audio(message.chat.id, audio_url)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("UPDATE users SET voice_count = voice_count + 1 WHERE id = %s", (user_id,))
        conn.commit()
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)



